version: "3.8"
services:
  kong:
    image: kong:latest
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 8000:8000
      - 8001:8001
      - 8443:8443
      - 8444:8444
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - kong-network
  
  auth-service:
    image: vivianapantazica/ia-ticket-auth-service:initial
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    ports:
      - 3000:3000
    environment:
      POSTGRES_HOST: postgres-auth
      POSTGRES_DB: auth
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    depends_on:
      - postgres-auth
    networks:
      - kong-network
      - auth-db-network
      - business-logic-network

  postgres-auth:
    image: postgres:15
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    ports:
      - 5123:5432
    environment:
      POSTGRES_DB: auth
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres-auth-db:/var/lib/postgresql/data
      - ./init-scripts/create-users.sql:/docker-entrypoint-initdb.d/create-users.sql
    networks:
      - auth-db-network

  pgadmin-auth:
    image: dpage/pgadmin4
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - 81:80
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com 
      PGADMIN_DEFAULT_PASSWORD: root
    depends_on:
      - postgres-auth
    networks:
      - auth-db-network

  io-service:
    image: vivianapantazica/ia-ticket-io-service:initial
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    ports:
      - 5050:5050
    environment:
      POSTGRES_HOST: db-io
      POSTGRES_DB: ticketing_app_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    networks:
      - io-db-network
      - business-logic-network
    depends_on:
      - db-io

  db-io:
    image: postgres
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    environment:
      POSTGRES_DB: ticketing_app_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres-io-db:/var/lib/postgresql/data
      - ./init-scripts/create-ticketing-app-db.sql:/docker-entrypoint-initdb.d/create-ticketing-app-db.sql
    networks:
      - io-db-network
      - io-db-admin-network

  adminer:
    image: adminer
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    ports:
      - 8080:8080
    networks:
      - io-db-admin-network
    depends_on:
      - db-io

  business-logic-service:
    image: vivianapantazica/ia-ticket-business-logic-service:initial
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    ports:
      - 3500:3500
    networks:
      - kong-network
      - business-logic-network
    depends_on:
      - auth-service
      - io-service

volumes:
  postgres-auth-db:
  postgres-io-db:

networks:
  kong-network:
  auth-db-network:
  io-db-network:
  io-db-admin-network:
  business-logic-network: